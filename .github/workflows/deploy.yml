# Nama workflow
name: Deploy Docker App to AWS EC2

# Pemicu workflow: dijalankan setiap kali ada push ke branch 'main'
on:
  push:
    branches:
      - main

# Daftar pekerjaan yang akan dijalankan
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Cargo Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/rust-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy and Run on EC2
        uses: appleboy/ssh-action@master
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          GITHUB_REPO: ${{ github.repository }}
          PORT: ${{ secrets.PORT }}
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}
          RABBITMQ_PORT: ${{ secrets.RABBITMQ_PORT }}
          RABBITMQ_MANAGEMENT_PORT: ${{ secrets.RABBITMQ_MANAGEMENT_PORT }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          REGION: ${{ secrets.REGION }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          envs: DEPLOY_KEY,GITHUB_REPO,PORT,RABBITMQ_USER,RABBITMQ_PASS,RABBITMQ_PORT,RABBITMQ_MANAGEMENT_PORT,DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,ACCESS_KEY,SECRET_KEY,REGION
          script: |
            set -e

            TARGET_DIR="/srv/rust-api"
            REPO_URL="git@github.com:$GITHUB_REPO.git"

            # --- Konfigurasi SSH Key untuk Git ---
            echo "--> Configuring SSH key for Git..."
            mkdir -p ~/.ssh
            echo "$DEPLOY_KEY" > ~/.ssh/id_deploy_key
            chmod 600 ~/.ssh/id_deploy_key
            export GIT_SSH_COMMAND="ssh -i ~/.ssh/id_deploy_key -o IdentitiesOnly=yes -o StrictHostKeyChecking=no"

            # --- Siapkan direktori dan sparse checkout ---
            sudo mkdir -p "$TARGET_DIR"
            sudo chown $USER:$USER "$TARGET_DIR"
            cd "$TARGET_DIR"

            if [ ! -d ".git" ]; then
              echo "--> Initializing Git repo for sparse checkout..."
              git init
              git remote add origin "$REPO_URL"
              git config core.sparseCheckout true
              echo "docker-compose.prod.yml" >> .git/info/sparse-checkout
            fi

            # --- Tarik file dari Git ---
            echo "--> Pulling the latest docker-compose.prod.yml from Git..."
            git pull origin main

            # Hapus file kunci setelah digunakan
            rm -f ~/.ssh/id_deploy_key

            # --- Buat file .env dari secrets ---
            echo "--> Creating .env file..."
            cat << EOL > .env
            PORT=$PORT
            RABBITMQ_USER=$RABBITMQ_USER
            RABBITMQ_PASS=$RABBITMQ_PASS
            RABBITMQ_PORT=$RABBITMQ_PORT
            RABBITMQ_MANAGEMENT_PORT=$RABBITMQ_MANAGEMENT_PORT
            DOCKER_IMAGE_NAME=$DOCKERHUB_USERNAME/rust-api
            IMAGE_TAG=latest
            ACCESS_KEY=$ACCESS_KEY
            SECRET_KEY=$SECRET_KEY
            REGION=$REGION
            EOL

            # --- Login ke Docker Hub & Jalankan Docker Compose ---
            echo "--> Logging in to Docker Hub..."
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            echo "--> Starting new containers..."
            docker compose -f docker-compose.prod.yml up -d --pull always --remove-orphans

            echo "--> Deployment finished. Final container status:"
            docker compose -f docker-compose.prod.yml ps
