name: Deploy Docker App to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Cargo Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/rust-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy and Run on EC2
        uses: appleboy/ssh-action@master
        env:
          PORT: ${{ secrets.PORT }}
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}
          RABBITMQ_PORT: ${{ secrets.RABBITMQ_PORT }}
          RABBITMQ_MANAGEMENT_PORT: ${{ secrets.RABBITMQ_MANAGEMENT_PORT }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          REGION: ${{ secrets.REGION }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          envs: PORT,RABBITMQ_USER,RABBITMQ_PASS,RABBITMQ_PORT,RABBITMQ_MANAGEMENT_PORT,DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,ACCESS_KEY,SECRET_KEY,REGION
          script: |
            set -e # Hentikan skrip jika ada error

            TARGET_DIR="/srv/rust-api"
            REPO_URL="https://github.com/${{ github.repository }}.git"

            # 1. Pastikan direktori target ada dan masuk ke dalamnya
            sudo mkdir -p "$TARGET_DIR"
            # Pastikan user Anda memiliki izin ke direktori
            sudo chown $USER:$USER "$TARGET_DIR"
            cd "$TARGET_DIR"

            # 2. Inisialisasi Git untuk sparse checkout HANYA jika belum ada
            if [ ! -d ".git" ]; then
              echo "--> Initializing Git repo for sparse checkout..."
              git init
              git remote add origin "$REPO_URL"
              git config core.sparseCheckout true
              # Tentukan file yang ingin diambil
              echo "docker-compose.prod.yml" >> .git/info/sparse-checkout
            fi

            # 3. Tarik versi terbaru DARI FILE YANG DITENTUKAN di sparse-checkout
            echo "--> Pulling the latest docker-compose.prod.yml from Git..."
            git pull origin main

            # 4. Buat file .env dari secrets (Langkah ini tetap diperlukan)
            echo "--> Creating .env file"
            cat << EOL > .env
            PORT=$PORT
            RABBITMQ_USER=$RABBITMQ_USER
            RABBITMQ_PASS=$RABBITMQ_PASS
            RABBITMQ_PORT=$RABBITMQ_PORT
            RABBITMQ_MANAGEMENT_PORT=$RABBITMQ_MANAGEMENT_PORT
            DOCKER_IMAGE_NAME=$DOCKERHUB_USERNAME/rust-api
            IMAGE_TAG=latest
            ACCESS_KEY=$ACCESS_KEY
            SECRET_KEY=$SECRET_KEY
            REGION=$REGION
            EOL

            # 5. Login ke Docker Hub
            echo "--> Logging in to Docker Hub on the EC2 server"
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            # 6. Jalankan Docker Compose
            # Gunakan --pull always untuk memastikan image terbaru ditarik
            echo "--> Starting new containers..."
            docker compose -f docker-compose.prod.yml up -d --pull always

            echo "--> Final container status:"
            docker compose -f docker-compose.prod.yml ps
