name: Deploy Docker App to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/rust-api:latest

      - name: Deploy and Run on EC2
        uses: appleboy/ssh-action@master
        env:
          PORT: ${{ secrets.PORT }}
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS: ${{ secrets.RABBITMQ_PASS }}
          RABBITMQ_PORT: ${{ secrets.RABBITMQ_PORT }}
          RABBITMQ_MANAGEMENT_PORT: ${{ secrets.RABBITMQ_MANAGEMENT_PORT }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          REGION: ${{ secrets.REGION }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          envs: PORT,RABBITMQ_USER,RABBITMQ_PASS,RABBITMQ_PORT,RABBITMQ_MANAGEMENT_PORT,DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,ACCESS_KEY,SECRET_KEY,REGION
          script: |
            set -e
              
            TARGET_DIR="/srv/rust-api"
            COMPOSE_FILE_PATH="$TARGET_DIR/docker-compose.prod.yml"

            echo "--> Preparing directory $TARGET_DIR"
            sudo mkdir -p $TARGET_DIR
            sudo chown $USER:$USER $TARGET_DIR
            cd $TARGET_DIR

            echo "--> Creating docker-compose.prod.yml"
            # Kita akan membuat file langsung di sini, lebih sederhana dan andal
            cat << EOF > "$COMPOSE_FILE_PATH"
            services:
              rust-api:
                image: \${DOCKER_IMAGE_NAME}:\${IMAGE_TAG:-latest}
                ports:
                  - "\${PORT}:\${PORT}"
                environment:
                  - PORT=\${PORT}
                  - RABBITMQ_URL=amqp://\${RABBITMQ_USER}:\${RABBITMQ_PASS}@rabbitmq:5672
                  - ACCESS_KEY=\${ACCESS_KEY}
                  - SECRET_KEY=\${SECRET_KEY}
                  - REGION=\${REGION}
                depends_on:
                  rabbitmq:
                    condition: service_healthy
                restart: unless-stopped

              rabbitmq:
                image: rabbitmq:3.12-management-alpine
                ports:
                  - "\${RABBITMQ_PORT}:\${RABBITMQ_PORT}"
                  - "\${RABBITMQ_MANAGEMENT_PORT}:\${RABBITMQ_MANAGEMENT_PORT}"
                environment:
                  - RABBITMQ_DEFAULT_USER=\${RABBITMQ_USER}
                  - RABBITMQ_DEFAULT_PASS=\${RABBITMQ_PASS}
                volumes:
                  - rabbitmq_data:/var/lib/rabbitmq
                restart: unless-stopped
                healthcheck:
                  test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
                  start_period: 30s

            volumes:
              rabbitmq_data:
                driver: local

            networks:
              default:
                driver: bridge
            EOF

            # PERUBAHAN: Menambahkan nama image ke dalam file .env
            echo "--> Creating .env file"
            cat << EOL > .env
            PORT=$PORT
            RABBITMQ_USER=$RABBITMQ_USER
            RABBITMQ_PASS=$RABBITMQ_PASS
            RABBITMQ_PORT=$RABBITMQ_PORT
            RABBITMQ_MANAGEMENT_PORT=$RABBITMQ_MANAGEMENT_PORT
            DOCKER_IMAGE_NAME=$DOCKERHUB_USERNAME/rust-api
            IMAGE_TAG=latest
            ACCESS_KEY=$ACCESS_KEY
            SECRET_KEY=$SECRET_KEY
            REGION=$REGION
            EOL

            echo "--> Logging in to Docker Hub on the EC2 server"
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

            echo "--> Stopping existing containers..."
            docker compose -f "$COMPOSE_FILE_PATH" down

            echo "--> Pulling latest images..."
            docker compose -f "$COMPOSE_FILE_PATH" pull

            echo "--> Starting new containers..."
            docker compose -f "$COMPOSE_FILE_PATH" up -d

            echo "--> Final container status:"
            docker compose -f "$COMPOSE_FILE_PATH" ps
