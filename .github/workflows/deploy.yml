name: Deploy Docker App to AWS EC2

on:
  push:
    branches:
      - main # Atau branch default Anda

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/rust-api:latest

      # ------------------------------------------------------------------
      # SEMUA LANGKAH DEPLOY DIGABUNGKAN MENJADI SATU UNTUK KEANDALAN
      # ------------------------------------------------------------------
      - name: Deploy and Run on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            # Hentikan skrip segera jika ada perintah yang gagal
            set -e

            TARGET_DIR="/srv/rust-api"

            # 1. Pastikan direktori ada dan dimiliki oleh pengguna saat ini
            echo "--> Preparing directory $TARGET_DIR"
            sudo mkdir -p $TARGET_DIR
            sudo chown $USER:$USER $TARGET_DIR
            cd $TARGET_DIR

            # 2. Buat file docker-compose.yml secara langsung di server
            # Ini lebih andal daripada menggunakan scp
            echo "--> Creating docker-compose.yml"
            cat << 'EOF' > docker-compose.yml
            ${{ env.DOCKER_COMPOSE_CONTENT }}
            EOF

            # 3. Buat file .env dari secrets
            echo "--> Creating .env file"
            cat << EOL > .env
            PORT=${{ secrets.PORT }}
            RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}
            RABBITMQ_PASS=${{ secrets.RABBITMQ_PASS }}
            RABBITMQ_PORT=${{ secrets.RABBITMQ_PORT }}
            RABBITMQ_MANAGEMENT_PORT=${{ secrets.RABBITMQ_MANAGEMENT_PORT }}
            EOL

            # 4. ðŸ”‘ LOGIN KE DOCKER HUB DI SERVER EC2 (LANGKAH PALING PENTING)
            echo "--> Logging in to Docker Hub on the EC2 server"
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            # 5. Hentikan container lama (jika ada) untuk menghindari konflik
            echo "--> Stopping existing containers..."
            docker compose down

            # 6. Tarik image terbaru dan jalankan container
            echo "--> Pulling latest images..."
            docker compose pull
            echo "--> Starting new containers..."
            docker compose up -d

            # 7. Tampilkan status container sebagai konfirmasi
            echo "--> Final container status:"
            docker compose ps

            # 8. Bersihkan image lama yang tidak terpakai
            echo "--> Pruning old images"
            docker image prune -af
